<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Curious...</title><link>https://udeshyadhungana.github.io/</link><description>Recent content in Home on Curious...</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 21 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://udeshyadhungana.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Git Internals</title><link>https://udeshyadhungana.github.io/articles/2025-05-21-understanding-git-internals/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://udeshyadhungana.github.io/articles/2025-05-21-understanding-git-internals/</guid><description>&lt;h1 id="understanding-git-internals">Understanding Git Internals&lt;/h1>
&lt;h1 id="how-does-git-clone-really-work">How does &lt;code>git clone&lt;/code> really work?&lt;/h1>
&lt;p>Before starting, I assume you are familiar with git. If you know about commits, branches, remote, cloning, staging and committing, you should be fine. Let’s build upon that.&lt;/p>
&lt;h2 id="section-1-git-storage-model">Section 1: Git Storage Model&lt;/h2>
&lt;p>If you are familiar with the git’s object-based storage model, you can skip this section.&lt;/p>
&lt;p>Git stores the &lt;strong>entire snapshot&lt;/strong> of your project each time you commit. This is made possible by its &lt;strong>object-based storage model&lt;/strong>. Here are some terms you should know.&lt;/p></description></item><item><title>Building Abstractions using Functions</title><link>https://udeshyadhungana.github.io/articles/2023-01-08-building-abstractions-with-functions/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://udeshyadhungana.github.io/articles/2023-01-08-building-abstractions-with-functions/</guid><description>&lt;p>If you have completed yet another 3-hour-long tutorial video on a new programming language and are well aware of basic concepts like variables, loops, functions, and arrays, but don’t know what to do next, well, this article is for you.&lt;/p>
&lt;p>Let us begin with a wishful thinking. Don’t roll your eyes. Programming involves lots and lots of wishful thinkings. Assume that you’re an intern at a renowned company which specializes in numerical computation.&lt;/p></description></item><item><title>Linear Regression</title><link>https://udeshyadhungana.github.io/articles/2021-05-04-linear-regression/</link><pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate><guid>https://udeshyadhungana.github.io/articles/2021-05-04-linear-regression/</guid><description>&lt;p>Hello. Today I want to write about Linear Regression. It is basically
the &amp;ldquo;Hello, World&amp;rdquo; program of Machine Learning. It is used to model
the relationship between one or more inputs and a single output. Its application
ranges from engineering to business. It is a process of learning from data.
It falls under supervised learning category of Maching Learning.
Regarding the algorithm, we have a set of inputs
\(X\) and their corresponding outputs \(Y\). From this,we try to come
up with a linear equation that best fits the data. Then, we can use that
equation to predict the output for new inputs.&lt;/p></description></item><item><title>The elegence of complex numbers</title><link>https://udeshyadhungana.github.io/articles/2020-10-14-complex-numbers/</link><pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate><guid>https://udeshyadhungana.github.io/articles/2020-10-14-complex-numbers/</guid><description>&lt;p>Hey folks, today I want to write about a familiar topic in Higher
mathematics, complex numbers, and in particular, the Euler&amp;rsquo;s
formula. Complex Numbers show up in a number of different fields, like
signal processing, electromagetism, quantum mechanics and many
more. Though it&amp;rsquo;s a frequently occuring content, from what I&amp;rsquo;ve
noticed, both the students and the experts are perplexed by complex
numbers. For example, the beginners become puzzled by basic questions
such as &amp;ldquo;What&amp;rsquo;s the meaning of \(\sqrt{-1}\) ?&amp;rdquo; or &amp;ldquo;Does \(\sqrt{-1}\)
even exist?&amp;rdquo;, and even some of the experts don&amp;rsquo;t understand the
intuition behind simple formula like Euler&amp;rsquo;s formula, and settle for
the explanation provided by hairy equations like Taylor&amp;rsquo;s expansion.&lt;/p></description></item><item><title>Using Neovim for programming</title><link>https://udeshyadhungana.github.io/articles/2020-08-12-vim-for-development/</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate><guid>https://udeshyadhungana.github.io/articles/2020-08-12-vim-for-development/</guid><description>&lt;p>As a programmer, I have this never ending thirst for productivity. On
the journey of quinching this thirst, a few months ago, I stumbled
upon a fantastic
&lt;a href="https://www.youtube.com/watch?v=a6Q8Na575qc">lecture&lt;/a> on YouTube
about Vim. After that, I started to use Vim. It wasn&amp;rsquo;t my first
introduction to Vim though. I first came to know about it about an
year ago. Still, I hadn&amp;rsquo;t been able to use it as my main editor,
because of one big problem: the learning curve. Vim is not easy to
learn, but once you get the hang of it, it starts to pay you off. It
took me about 20 days to become comfortable with it. So, if you&amp;rsquo;re
planning on using it, don&amp;rsquo;t be frustrated in the beginning. It&amp;rsquo;ll test
your patience, but you must stand your ground. I assume you are on a
Linux system. Let&amp;rsquo;s begin.&lt;/p></description></item></channel></rss>